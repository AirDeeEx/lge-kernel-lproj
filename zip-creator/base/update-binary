#!/sbin/sh

# Get values used in original zip
#interface="${1}"
updater_fd="${2}"
zipfile="${3}"

# Set ui_print
ui_print() {
	echo -en "ui_print ${1}\n" > /proc/self/fd/"${updater_fd}"
	echo -en "ui_print \n" > /proc/self/fd/"${updater_fd}"
}

# Start of main process
START=$(date +"%s")

# Clean working /tmp/kernel folder
rm -rf /tmp/kernel/
mkdir -p /tmp/kernel/
cd /tmp/kernel/

# Unzip current zipfile
unzip "${zipfile}"

# Get device.prop values
builder=$(sed -n '1p' /tmp/kernel/device.prop)
custom_kernel=$(sed -n '2p' /tmp/kernel/device.prop)
device_name=$(sed -n '3p' /tmp/kernel/device.prop)
release=$(sed -n '4p' /tmp/kernel/device.prop)

# Initial Print
ui_print
ui_print "${builder} Presents"
ui_print "${custom_kernel} for ${device_name}"
ui_print "${release}"

# Desmount /system if user mounted it before
if [ $(mount | grep /system | wc -l) -ge 1 ]
then
	_mounted_before="true"
	umount /system
fi
mount /system

# Delete all old modules
rm -rf /system/lib/modules/*.ko
cp /tmp/kernel/modules/*.ko /system/lib/modules/
chmod 644 /system/lib/modules/*.ko

# Pickup original boot.img to use only current ramdisk
dd if=/dev/block/mmcblk0p9 of=/tmp/kernel/boot.img

# Unpack current ramdisk from original boot.img
chmod 777 /tmp/kernel/unpackbootimg
/tmp/kernel/unpackbootimg /tmp/kernel/boot.img

# Make a new boot.img with current ramdisk
chmod 777 /tmp/kernel/mkbootimg
/tmp/kernel/mkbootimg --kernel /tmp/kernel/zImage --ramdisk /tmp/kernel/boot.img-ramdisk.gz --cmdline "$(cat /tmp/kernel/boot.img-cmdline)" --base "$(cat /tmp/kernel/boot.img-base)" -o /tmp/kernel/newboot.img

# Flash new boot.img
dd if=/tmp/kernel/newboot.img of=/dev/block/mmcblk0p9

# Remount /system if user mounted it before
if [ ! "${_mounted_before}" == "true" ]
then
	umount /system
fi
unset _mounted_before

# Clean working /tmp/kernel folder
rm -rf /tmp/kernel/

# End of work
BUILDTIME=$(($(date +"%s") - ${START}))

# End of main process
ui_print "Flash done in $((${BUILDTIME} % 60)) seconds."
ui_print
